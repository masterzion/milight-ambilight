#!/usr/bin/env python
import wx
app = wx.App(False)


import gtk
import gtk.glade
import milight
import time
import os




from milight_config import MilightConfig
from milight_ambilight import MilightAmbilight
from multiprocessing import Process
from time import sleep


# https://github.com/jmcantrell/python-imageutils/blob/master/imageutils/color.py
def rgb16_to_rgb8(value): 
    return tuple(int(v/257.0) for v in value)


class ShowMain:
    global color
    def __init__(self):
        #set Icon
        app_path = os.path.dirname(os.path.realpath(__file__))
        self.window = gtk.Window()
        self.window.set_icon_from_file(app_path+'/migui.ico')

        #Set the Glade file
        gtk.gdk.threads_init()
        self.gladefile = "main.glade"  
        self.wTree = gtk.glade.XML(self.gladefile) 

        # set functions        
        self.wTree.signal_connect("gtk_main_quit",                    self.on_destroy)

        self.wTree.signal_connect("on_colorselection1_color_changed", self.set_color)
        self.wTree.signal_connect("on_checkbutton1_toggled",          self.set_color)
        self.wTree.signal_connect("on_checkbutton2_toggled",          self.set_color)
        self.wTree.signal_connect("on_checkbutton3_toggled",          self.set_color)
        self.wTree.signal_connect("on_checkbutton4_toggled",          self.set_color)
        self.wTree.signal_connect("on_checkambilight_toggled",        self.colorselection1_click)

        self.wTree.signal_connect("on_btnSave_clicked",               self.save_config)

        # get components
        self.colorselection1 = self.wTree.get_widget("colorselection1");
        self.checkBox1 = self.wTree.get_widget("checkbutton1");
        self.checkBox2 = self.wTree.get_widget("checkbutton2");
        self.checkBox3 = self.wTree.get_widget("checkbutton3");
        self.checkBox4 = self.wTree.get_widget("checkbutton4");
        self.ambilight = self.wTree.get_widget("checkambilight");

        # load config
        self.config = MilightConfig()
        self.ambilight_checked = False
        self.TimerInterval = 0
        self.wTree.get_widget("edtHost").set_text( self.config.milight_hostname ) 
        self.wTree.get_widget("edtPort").set_value( self.config.milight_port ) 
        self.wTree.get_widget("hscalepixel").set_value( self.config.pixel_interval )
        self.wTree.get_widget("checkdebug").set_active( self.config.debug ) 

        self.wTree.get_widget("hscaleinterval").set_value( self.config.time_interval * 1000 ) 
        self.setTimerInterval ( self.config.time_interval * 1000 )


        # connect
        light = milight.LightBulb(['rgbw'])
        self.controller = milight.MiLight({'host': self.config.milight_hostname, 'port': self.config.milight_port}, wait_duration=0) 
        self.light = milight.LightBulb(['rgbw'])
        self.window = self.wTree.get_widget("MainWindow")
        self.controller.send(light.all_on())

        self.myAmbilight =  MilightAmbilight()
        self.myAmbilight.debug = self.config.debug
        self.myAmbilight.MonitoredPoints( self.config.pixel_interval )
        self.set_color(self)

        # start thread
        gtk.timeout_add( int( self.config.time_interval * 1000  ), self.sendThread)

        if (self.window):
            self.window.connect("destroy", gtk.main_quit)

    def sendThread(self):
        # user selected color or ambilight
        if ( self.ambilight_checked ):
            color = self.myAmbilight.CurrentColor()
        else:
            color = self.color

        if self.config.debug :
            print   color

        # all lights or custom groups
        if ( len( self.group_array ) == 4 ) :
            self.controller.send(self.light.color(milight.color_from_rgb( color[0], color[1], color[2] ) ) )
        else :
            for group in self.group_array:
                self.controller.send(self.light.color( milight.color_from_rgb( color[0], color[1], color[2] ) , group)  )

        #new timer interval 
        if ( self.lastTimerInterval != self.TimerInterval ):
            self.lastTimerInterval = self.TimerInterval
            gtk.timeout_add( self.TimerInterval, self.sendThread)
            return False
        else :
            return True

    def colorselection1_click(self, widget):
        self.ambilight_checked =  widget.get_active()
        self.colorselection1.set_sensitive(not self.ambilight_checked) 

    def on_destroy(self, widget=None, *data):
        gtk.main_quit

    def save_config(self, widget):
        self.config.milight_hostname  = self.wTree.get_widget("edtHost").get_text() 
        self.config.milight_port      = self.wTree.get_widget("edtPort").get_value() 
        self.config.pixel_interval    = self.wTree.get_widget("hscalepixel").get_value();
        self.config.time_interval     = self.wTree.get_widget("hscaleinterval").get_value() /  1000
        self.setTimerInterval ( self.wTree.get_widget("hscaleinterval").get_value() )
        self.config.debug             = self.wTree.get_widget("checkdebug").get_active() 

        self.myAmbilight =  MilightAmbilight()
        self.myAmbilight.debug = self.config.debug
        print self.myAmbilight.MonitoredPoints( self.config.pixel_interval )


        self.myAmbilight.debug = self.config.debug
        self.config.save_config()

    def setTimerInterval(self, TimerInterval):
        self.lastTimerInterval = self.TimerInterval
        self.TimerInterval     = int(TimerInterval)

    def set_color(self, widget):
        color  = self.colorselection1.get_current_color()
        colorrgb  = (color.red, color.green, color.blue)
        self.color = rgb16_to_rgb8( colorrgb )

        group_array = list()

        if (self.checkBox1.get_active()):
            group_array.append(1)

        if (self.checkBox2.get_active()):
            group_array.append(2)

        if (self.checkBox3.get_active()):
            group_array.append(3)

        if (self.checkBox4.get_active()):
            group_array.append(4)

        self.group_array = group_array


if __name__ == "__main__":
    hwg = ShowMain()
    gtk.main()
